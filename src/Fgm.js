/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useThree, useFrame } from "@react-three/fiber";
import {
  CubeCamera,
  WebGLCubeRenderTarget,
  RGBFormat,
  LinearMipmapLinearFilter,
} from "three";

export default function Model({ material, ...props}) {
  const group = useRef()
  const { nodes } = useGLTF('/fgm.glb')
  const { scene, gl } = useThree()

  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {
    format: RGBFormat,
    generateMipmaps: true,
    minFilter: LinearMipmapLinearFilter,
  });
  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);
  cubeCamera.position.set(0, 100, 0);
  scene.add(cubeCamera);

  // Update the cubeCamera with current renderer and scene.
  useFrame(() => {
    cubeCamera.update(gl, scene)
  })
  
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh 
        geometry={nodes.mesh_0.geometry} 
        position={[0, 0, 0]} 
        rotation={[0, 0, 0]} 
        visible 
        scale={0.015}
      >
        <meshBasicMaterial 
          attach="material"
          envMap={cubeCamera.renderTarget.texture}
          color="white"
          roughness={0.1}
          metalness={1}
        />
      </mesh>
    </group>
  )
}


// 
useGLTF.preload('/fgm.glb')
